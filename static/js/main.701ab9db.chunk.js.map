{"version":3,"sources":["components/TodoItem.jsx","components/Todos.jsx","components/Header.jsx","components/AddForm.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getSingleItemStyle","padding","borderBottom","textDecoration","props","singleToDo","completed","style","this","marginRight","type","onChange","markComplete","bind","id","title","onClick","deleteItem","className","Component","Todos","todoList","map","key","Header","AddFrom","state","onSubmit","e","preventDefault","addItem","setState","target","name","value","placeholder","App","uuid","filter","newTodo","AddForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.701ab9db.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass TodoItem extends Component {\r\n  getSingleItemStyle = () => {\r\n    return {\r\n      padding: \"10px\",\r\n      borderBottom: \"1px solid #eee\",\r\n      textDecoration: this.props.singleToDo.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.getSingleItemStyle()}>\r\n        <h4>\r\n          <input\r\n            style={{ marginRight: \"10px\" }}\r\n            type=\"checkbox\"\r\n            onChange={this.props.markComplete.bind(\r\n              this,\r\n              this.props.singleToDo.id\r\n            )}\r\n          ></input>\r\n          {this.props.singleToDo.title}\r\n          <button\r\n            onClick={this.props.deleteItem.bind(this, this.props.singleToDo.id)}\r\n            className=\"btn sm-btn btn-danger float-right\"\r\n          >\r\n            Trush\r\n          </button>\r\n        </h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todoList.map((singleToDo) => (\r\n      <TodoItem\r\n        key={singleToDo.id}\r\n        singleToDo={singleToDo}\r\n        markComplete={this.props.markComplete}\r\n        deleteItem={this.props.deleteItem}\r\n      />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"text-center bg-dark text-white\">\r\n        <h2 className=\"p-3\">TODO</h2>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddFrom extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addItem(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} className=\"d-flex input-form\">\r\n        <input\r\n          className=\"flex-grow-1 title\"\r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add your task...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        ></input>\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n          className=\"btn sm-btn btn-secondary\"\r\n        ></input>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddFrom;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/Header\";\nimport AddForm from \"./components/AddForm\";\nimport { v1 as uuid } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    todoList: [\n      {\n        id: uuid(),\n        title: \"This one is a dummy todo title!\",\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: \"This is the second dummy todo title!\",\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: \"This is the last dummy title!\",\n        completed: false,\n      },\n    ],\n  };\n\n  // Task Complete Method\n  markComplete = (id) => {\n    this.setState({\n      todoList: this.state.todoList.map((singleToDo) => {\n        if (singleToDo.id === id) {\n          singleToDo.completed = !singleToDo.completed;\n        }\n        return singleToDo;\n      }),\n    });\n  };\n\n  // Task Delete Method\n  deleteItem = (id) => {\n    this.setState({\n      todoList: [\n        ...this.state.todoList.filter((singleToDo) => singleToDo.id !== id),\n      ],\n    });\n  };\n\n  // Task Add Item Method\n  addItem = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false,\n    };\n    this.setState({ todoList: [...this.state.todoList, newTodo] });\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3 text-left p-4 bg-light\">\n            <Header></Header>\n            <AddForm addItem={this.addItem} />\n            <Todos\n              todoList={this.state.todoList}\n              markComplete={this.markComplete}\n              deleteItem={this.deleteItem}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}